name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
    
    - name: Install dependencies
      run: |
        pipenv install --dev --python $(which python)
        # Ensure tomli is available for Black's TOML parsing
        pipenv run pip install tomli
    
    - name: Check code formatting with Black
      run: |
        pipenv run black --check --diff siril_mcp/ tests/
    
    - name: Check import sorting with isort
      run: |
        pipenv run isort --check-only --diff siril_mcp/ tests/
    
    - name: Lint with flake8
      run: |
        pipenv run flake8 siril_mcp/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        pipenv run flake8 siril_mcp/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run tests
      run: |
        pipenv run pytest tests/ -v

  mcp-integration-test:
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
    
    - name: Install Python dependencies
      run: |
        pipenv install --dev --python $(which python)
    
    - name: Install Node.js dependencies
      run: |
        npm install
    
    - name: Run MCP functionality tests
      run: |
        npm run test
    
    - name: Run MCP integration tests
      run: |
        npm run test:integration
      env:
        # Skip Siril binary checks in CI (not available in GitHub runners)
        CI: true

  build-test:
    runs-on: ubuntu-latest
    needs: [lint-and-format, mcp-integration-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package with twine
      run: |
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
