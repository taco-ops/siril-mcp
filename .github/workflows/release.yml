name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv

    - name: Install dependencies
      run: |
        pipenv install --dev --python $(which python)
        npm install

    - name: Run pre-commit hooks
      run: |
        pipenv run pre-commit run --all-files

  mcp-integration-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv

    - name: Install Python dependencies
      run: |
        pipenv install --dev --python $(which python)

    - name: Install Node.js dependencies
      run: |
        npm install

    - name: Run MCP functionality tests
      run: |
        npm run test

    - name: Run MCP integration tests
      run: |
        npm run test:integration
      env:
        # Skip Siril binary checks in CI (not available in GitHub runners)
        CI: true

  build-and-release:
    runs-on: ubuntu-latest
    needs: [lint-and-test, mcp-integration-test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package with twine
      run: |
        twine check dist/*

    - name: Extract version from tag
      id: extract_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ steps.extract_version.outputs.TAG_NAME }} \
          --title "Release ${{ steps.extract_version.outputs.TAG_NAME }}" \
          --notes "## Changes in this Release

        - Please add release notes here

        ## Installation

        You can install this version using pip:

        \`\`\`bash
        pip install siril-mcp==${{ steps.extract_version.outputs.VERSION }}
        \`\`\`

        Or download the wheel file from the assets below." \
          dist/siril_mcp-${{ steps.extract_version.outputs.VERSION }}-py3-none-any.whl \
          dist/siril-mcp-${{ steps.extract_version.outputs.VERSION }}.tar.gz

    # Optional: Publish to PyPI (uncomment and add PYPI_API_TOKEN secret)
    # - name: Publish to PyPI
    #   env:
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    #   run: |
    #     twine upload dist/*
