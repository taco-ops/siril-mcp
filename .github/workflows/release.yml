name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv
    
    - name: Install dependencies
      run: |
        pipenv install --dev --python $(which python)
        # Ensure tomli is available for Black's TOML parsing
        pipenv run pip install tomli
    
    - name: Check code formatting with Black
      run: |
        pipenv run black --check siril_mcp/ tests/
    
    - name: Check import sorting with isort
      run: |
        pipenv run isort --check-only siril_mcp/ tests/
    
    - name: Lint with flake8
      run: |
        pipenv run flake8 siril_mcp/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        pipenv run flake8 siril_mcp/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Run tests
      run: |
        pipenv run pytest tests/ -v

  build-and-release:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package with twine
      run: |
        twine check dist/*
    
    - name: Extract version from tag
      id: extract_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.extract_version.outputs.TAG_NAME }}
        release_name: Release ${{ steps.extract_version.outputs.TAG_NAME }}
        body: |
          ## Changes in this Release
          
          - Please add release notes here
          
          ## Installation
          
          You can install this version using pip:
          
          ```bash
          pip install siril-mcp==${{ steps.extract_version.outputs.VERSION }}
          ```
          
          Or download the wheel file from the assets below.
        draft: false
        prerelease: false
    
    - name: Upload wheel to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/siril_mcp-${{ steps.extract_version.outputs.VERSION }}-py3-none-any.whl
        asset_name: siril_mcp-${{ steps.extract_version.outputs.VERSION }}-py3-none-any.whl
        asset_content_type: application/zip
    
    - name: Upload source distribution to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/siril-mcp-${{ steps.extract_version.outputs.VERSION }}.tar.gz
        asset_name: siril-mcp-${{ steps.extract_version.outputs.VERSION }}.tar.gz
        asset_content_type: application/gzip

    # Optional: Publish to PyPI (uncomment and add PYPI_API_TOKEN secret)
    # - name: Publish to PyPI
    #   env:
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    #   run: |
    #     twine upload dist/*
